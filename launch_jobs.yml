---
- name: 'Execute a job template with dynamic limits and dynamic instance groups'
  gather_facts: false
  hosts: 'localhost'

  tasks:
    - name: 'Ensure all variables required are passed'
      ansible.builtin.assert:
        that:
          - job_template_name is defined
          - job_template_name is string
          - job_template_name != None
          - job_template_name != ''

    - name: 'Ensure required environment variables are defined'
      ansible.builtin.assert:
        that:
          - lookup('env', __env_var, default='') is string
          - lookup('env', __env_var, default='') != None
          - lookup('env', __env_var, default='') != ''
      loop:
        - 'CONTROLLER_HOST'
        - 'CONTROLLER_USERNAME'
        - 'CONTROLLER_PASSWORD'
      loop_control:
        loop_var: '__env_var'

    - name: 'Set credentials as fact'
      ansible.builtin.set_fact:
        controller_host: "{{ lookup('env', 'CONTROLLER_HOST') }}"
        controller_username: "{{ lookup('env', 'CONTROLLER_USERNAME') }}"
        controller_password: "{{ lookup('env', 'CONTROLLER_PASSWORD') }}"

    - name: 'Gather information about the job template'
      ansible.builtin.set_fact:
        __job_template: "{{ q('ansible.controller.controller_api', 'job_templates',
                               host=controller_host, username=controller_username, password=controller_password,
                               return_all=true, verify_ssl=false, query_params={'name': job_template_name} ) | first }}"

    - name: 'Retrieve name of the used inventory in {{ __job_template.name }}'
      ansible.builtin.set_fact:
        __inventory: "{{ q('ansible.controller.controller_api', 'inventories',
                           host=controller_host, username=controller_username, password=controller_password,
                           return_all=true, verify_ssl=false, query_params={'id': __job_template.inventory} ) | first }}"

    - name: 'Retrieve hosts of inventory {{ __inventory.name }}'
      ansible.builtin.set_fact:
        __hosts: "{{ q('ansible.controller.controller_api', 'inventories/{{ __job_template.inventory }}/hosts',
                       host=controller_host, username=controller_username, password=controller_password,
                       return_all=true, verify_ssl=false) }}"

    - name: 'Map instance groups to hosts'
      ansible.builtin.set_fact:
        __hosts_instance_groups: >
          {{
              __hosts_instance_groups | default({}) | combine
              (
                {
                  item.variables | from_json | dict2items | selectattr('key', 'equalto', 'instance_group') | map(attribute='value') | first:
                    __hosts_instance_groups | default({}) | dict2items |
                    selectattr('key', 'equalto', item.variables | from_json | dict2items |
                      selectattr('key', 'equalto', 'instance_group') | map(attribute='value') | first) | map(attribute='value', default=[]
                    ) | flatten + [ item.name ]
                }
              )
          }}
      loop: '{{ __hosts }}'

    - name: 'Launch jobs'
      ansible.controller.job_launch:
        controller_host: '{{ controller_host }}'
        controller_username: '{{ controller_username }}'
        controller_password: '{{ controller_password }}'
        validate_certs: false
        job_template: '{{ job_template_name }}'
        instance_groups: '{{ item.key }}'
        limit: "{{ item.value | join(',') }}"
      loop: '{{ __hosts_instance_groups | dict2items }}'
